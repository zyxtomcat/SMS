// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SAS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <SAS.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __SAS__SASSession__SendSMS_name = "SendSMS";

const ::std::string __SAS__SASSession__QuerySMS_name = "QuerySMS";

}

IceAsync::SAS::AMD_SASSession_SendSMS::AMD_SASSession_SendSMS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::SAS::AMD_SASSession_SendSMS::ice_response(const ::std::string& response)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(response);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}
::IceProxy::Ice::Object* ::IceProxy::SAS::upCast(::IceProxy::SAS::SASSession* p) { return p; }

void
::IceProxy::SAS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::SAS::SASSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::SAS::SASSession;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::SAS::SASSession::SendSMS(const ::std::string& request, ::std::string& response, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __SAS__SASSession__SendSMS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__SAS__SASSession__SendSMS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::SAS::SASSession* __del = dynamic_cast< ::IceDelegate::SAS::SASSession*>(__delBase.get());
            __del->SendSMS(request, response, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::SAS::SASSession::begin_SendSMS(const ::std::string& request, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__SAS__SASSession__SendSMS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SAS__SASSession__SendSMS_name, __del, __cookie);
    try
    {
        __result->__prepare(__SAS__SASSession__SendSMS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(request);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::SAS::SASSession::end_SendSMS(::std::string& response, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __SAS__SASSession__SendSMS_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(response);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::SAS::SASSession::QuerySMS(const ::std::string& request, ::std::string& response, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __SAS__SASSession__QuerySMS_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__SAS__SASSession__QuerySMS_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::SAS::SASSession* __del = dynamic_cast< ::IceDelegate::SAS::SASSession*>(__delBase.get());
            __del->QuerySMS(request, response, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::SAS::SASSession::begin_QuerySMS(const ::std::string& request, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__SAS__SASSession__QuerySMS_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __SAS__SASSession__QuerySMS_name, __del, __cookie);
    try
    {
        __result->__prepare(__SAS__SASSession__QuerySMS_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(request);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::SAS::SASSession::end_QuerySMS(::std::string& response, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __SAS__SASSession__QuerySMS_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(response);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::SAS::SASSession::ice_staticId()
{
    return ::SAS::SASSession::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::SAS::SASSession::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::SAS::SASSession);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::SAS::SASSession::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::SAS::SASSession);
}

::IceProxy::Ice::Object*
IceProxy::SAS::SASSession::__newInstance() const
{
    return new SASSession;
}

void
IceDelegateM::SAS::SASSession::SendSMS(const ::std::string& request, ::std::string& response, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __SAS__SASSession__SendSMS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(request);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(response);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::SAS::SASSession::QuerySMS(const ::std::string& request, ::std::string& response, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __SAS__SASSession__QuerySMS_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(request);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(response);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::SAS::SASSession::SendSMS(const ::std::string&, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

void
IceDelegateD::SAS::SASSession::QuerySMS(const ::std::string& request, ::std::string& response, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_request, ::std::string& __p_response, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_request(__p_request),
            _m_response(__p_response)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::SAS::SASSession* servant = dynamic_cast< ::SAS::SASSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->QuerySMS(_m_request, _m_response, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_request;
        ::std::string& _m_response;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __SAS__SASSession__QuerySMS_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(request, response, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* SAS::upCast(::SAS::SASSession* p) { return p; }

namespace
{
const ::std::string __SAS__SASSession_ids[2] =
{
    "::Ice::Object",
    "::SAS::SASSession"
};

}

bool
SAS::SASSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__SAS__SASSession_ids, __SAS__SASSession_ids + 2, _s);
}

::std::vector< ::std::string>
SAS::SASSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__SAS__SASSession_ids[0], &__SAS__SASSession_ids[2]);
}

const ::std::string&
SAS::SASSession::ice_id(const ::Ice::Current&) const
{
    return __SAS__SASSession_ids[1];
}

const ::std::string&
SAS::SASSession::ice_staticId()
{
    return __SAS__SASSession_ids[1];
}

::Ice::DispatchStatus
SAS::SASSession::___SendSMS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string request;
    __is->read(request);
    __inS.endReadParams();
    ::SAS::AMD_SASSession_SendSMSPtr __cb = new IceAsync::SAS::AMD_SASSession_SendSMS(__inS);
    try
    {
        SendSMS_async(__cb, request, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
SAS::SASSession::___QuerySMS(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string request;
    __is->read(request);
    __inS.endReadParams();
    ::std::string response;
    QuerySMS(request, response, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(response);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __SAS__SASSession_all[] =
{
    "QuerySMS",
    "SendSMS",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
SAS::SASSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__SAS__SASSession_all, __SAS__SASSession_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __SAS__SASSession_all)
    {
        case 0:
        {
            return ___QuerySMS(in, current);
        }
        case 1:
        {
            return ___SendSMS(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
SAS::SASSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
SAS::SASSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
SAS::__patch(SASSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::SAS::SASSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::SAS::SASSession::ice_staticId(), v);
    }
}
